/***********************************************************************************************************************
* @file program4.cpp
* @brief Simple 3D Box Dimensioning System Using PCL
* @author Reety Gyawali
**********************************************************************************************************************/

#include "CloudVisualizer.h"

#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/io/ply_io.h>
#include <pcl/common/time.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/segmentation/sac_segmentation.h>

#include <pcl/filters/voxel_grid.h>

#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/kdtree/io.h>
#include <pcl/segmentation/euclidean_cluster_comparator.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/project_inliers.h>

#define NUM_COMMAND_ARGS 1

using namespace std;

// function prototypes
void pointPickingCallback(const pcl::visualization::PointPickingEvent& event, void* cookie);
void keyboardCallback(const pcl::visualization::KeyboardEvent &event, void* viewer_void);
pcl::ModelCoefficients::Ptr segmentPlane(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations);
void removePoints(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudIn, pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudOut, const pcl::PointIndices::ConstPtr &inliers);

/***********************************************************************************************************************
* @brief callback function for handling a point picking event
* @param[in] event handle generated by the visualization window
* @param[in] cookie user data passed by the event
* @author Christoper D. McMurrough
**********************************************************************************************************************/
void pointPickingCallback(const pcl::visualization::PointPickingEvent& event, void* cookie)
{
    static int pickCount = 0;
    static pcl::PointXYZRGBA lastPoint;

    pcl::PointXYZRGBA p;
    event.getPoint(p.x, p.y, p.z);

    cout << "POINT CLICKED: " << p.x << " " << p.y << " " << p.z << endl;

    // if we have picked a point previously, compute the distance
    if(pickCount % 2 == 1)
    {
        double d = std::sqrt((p.x - lastPoint.x) * (p.x - lastPoint.x) + (p.y - lastPoint.y) * (p.y - lastPoint.y) + (p.z - lastPoint.z) * (p.z - lastPoint.z));
        cout << "DISTANCE BETWEEN THE POINTS: " << d << endl;
    }

    // update the last point and pick count
    lastPoint.x = p.x;
    lastPoint.y = p.y;
    lastPoint.z = p.z;
    pickCount++;
}

/***********************************************************************************************************************
* @brief callback function for handling a keypress event
* @param[in] event handle generated by the visualization window
* @param[in] viewer_void user data passed by the event
* @author Christoper D. McMurrough
**********************************************************************************************************************/
void keyboardCallback(const pcl::visualization::KeyboardEvent &event, void* viewer_void)
{
    // handle key down events
    if(event.keyDown())
    {
        // handle any keys of interest
        switch(event.getKeyCode())
        {
            case 'a':
                cout << "KEYPRESS DETECTED: '" << event.getKeySym() << "'" << endl;
                break;
            default:
                break;
        }
    }
}

/***********************************************************************************************************************
* @brief Opens a point cloud file
*
* Opens a point cloud file in either PCD or PLY format
*
* @param[out] cloudOut pointer to opened point cloud
* @param[in] filename path and name of input file
* @return false if an error occurred while opening file
* @author Christopher D. McMurrough
**********************************************************************************************************************/
bool openCloud(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudOut, const char* fileName)
{
    // convert the file name to string
    std::string fileNameStr(fileName);

    // handle various file types
    std::string fileExtension = fileNameStr.substr(fileNameStr.find_last_of(".") + 1);
    if(fileExtension.compare("pcd") == 0)
    {
        // attempt to open the file
        if(pcl::io::loadPCDFile<pcl::PointXYZRGBA>(fileNameStr, *cloudOut) == -1)
        {
            PCL_ERROR("error while attempting to read pcd file: %s \n", fileNameStr.c_str());
            return false;
        }
        else
        {
            return true;
        }
    }
    else if(fileExtension.compare("ply") == 0)
    {
        // attempt to open the file
        if(pcl::io::loadPLYFile<pcl::PointXYZRGBA>(fileNameStr, *cloudOut) == -1)
        {
            PCL_ERROR("error while attempting to read pcl file: %s \n", fileNameStr.c_str());
            return false;
        }
        else
        {
            return true;
        }
    }
    else
    {
        PCL_ERROR("error while attempting to read unsupported file: %s \n", fileNameStr.c_str());
        return false;
    }
}

/*******************************************************************************************************************//**
 * @brief Locate a plane in the cloud
 *
 * Perform planar segmentation using RANSAC, returning the plane parameters and point indices
 *
 * @param[in] cloudIn pointer to input point cloud
 * @param[out] inliers list containing the point indices of inliers
 * @param[in] distanceThreshold maximum distance of a point to the planar model to be considered an inlier
 * @param[in] maxIterations maximum number of iterations to attempt before returning
 * @return the number of inliers
 **********************************************************************************************************************/
pcl::ModelCoefficients::Ptr segmentPlane(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations)
{
    // store the model coefficients
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);

    // Create the segmentation object for the planar model and set the parameters
    pcl::SACSegmentation<pcl::PointXYZRGBA> seg;
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setMaxIterations(maxIterations);
    seg.setDistanceThreshold(distanceThreshold);

    // Segment the largest planar component from the remaining cloud
    seg.setInputCloud(cloudIn);
    seg.segment(*inliers, *coefficients);
    return coefficients;
}

void removePoints(const pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudIn, pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudOut, const pcl::PointIndices::ConstPtr &inliers)
{
    pcl::ExtractIndices<pcl::PointXYZRGBA> extract;
    extract.setInputCloud(cloudIn);
    extract.setIndices(inliers);
    extract.setNegative(true);
    extract.filter(*cloudOut);
}

void getBoxDimensions(pcl::ModelCoefficients::Ptr planeCoefficients, const pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cluster, double &length, double &width, double &height) {
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr clusterProjected(new pcl::PointCloud<pcl::PointXYZRGBA>);

    // Project points onto the plane (tabletop) to get 2D coordinates
    pcl::ProjectInliers<pcl::PointXYZRGBA> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cluster);
    proj.setModelCoefficients(planeCoefficients);
    proj.filter(*clusterProjected);

    // Compute the bounding box for the projected cluster
    pcl::PointXYZRGBA minPt, maxPt;
    pcl::getMinMax3D(*clusterProjected, minPt, maxPt);

    // Compute the dimensions (length and width) of the box top
    length = maxPt.x - minPt.x;
    width = maxPt.y - minPt.y;
    height = maxPt.z - minPt.z;
}

/***********************************************************************************************************************
* @brief program entry point
* @param[in] argc number of command line arguments
* @param[in] argv string array of command line arguments
* @returnS return code (0 for normal termination)
* @author Christoper D. McMurrough
**********************************************************************************************************************/
int main(int argc, char** argv)
{
    // validate and parse the command line arguments
    if(argc != NUM_COMMAND_ARGS + 1)
    {
        std::printf("USAGE: %s <file_name>\n", argv[0]);
        return 0;
    }

    // parse the command line arguments
    char* fileName = argv[1];

    // initialize the cloud viewer
    CloudVisualizer CV("Rendering Window");

    // open the point cloud
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGBA>);
    openCloud(cloud, fileName);

    // segment a plane
    const float distanceThreshold = 0.0254;
    const int maxIterations = 5000;
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    pcl::ModelCoefficients::Ptr coefficients = segmentPlane(cloud, inliers, distanceThreshold, maxIterations);
    std::cout << "Segmentation result: " << inliers->indices.size() << " points" << std::endl;
    
    // color the plane inliers white
    for(int i = 0; i < inliers->indices.size(); i++)
    {
        int index = inliers->indices.at(i);
        cloud->points.at(index).r = 255;
        cloud->points.at(index).g = 255;
        cloud->points.at(index).b = 255;
    }
    
    //remove the plane points
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud2(new pcl::PointCloud<pcl::PointXYZRGBA>);
    removePoints(cloud, cloud2, inliers);

    // downsample the cloud using a voxel grid filter
    const float voxelSize = 0.01;
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud2Filtered(new pcl::PointCloud<pcl::PointXYZRGBA>);
    pcl::VoxelGrid<pcl::PointXYZRGBA> voxFilter;
    voxFilter.setInputCloud(cloud2);
    voxFilter.setLeafSize(static_cast<float>(voxelSize), static_cast<float>(voxelSize), static_cast<float>(voxelSize));
    voxFilter.filter(*cloud2Filtered);
    std::cout << "Points before downsampling: " << cloud2->points.size() << std::endl;
    std::cout << "Points before downsampling: " << cloud2Filtered->points.size() << std::endl;

    // create the vector of indices lists (each element contains a list of imultiple indices)
    const float clusterDistance = 0.02;
    int minClusterSize = 50;
    int maxClusterSize = 100000;
    std::vector<pcl::PointIndices> clusterIndices;

    // Creating the KdTree object for the search method of the extraction
    pcl::search::KdTree<pcl::PointXYZRGBA>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGBA>);
    tree->setInputCloud(cloud2Filtered);

    // create the euclidian cluster extraction object
    pcl::EuclideanClusterExtraction<pcl::PointXYZRGBA> ec;
    ec.setClusterTolerance(clusterDistance);
    ec.setMinClusterSize(minClusterSize);
    ec.setMaxClusterSize(maxClusterSize);
    ec.setSearchMethod(tree);
    ec.setInputCloud(cloud2Filtered);

    // perform the clustering
    ec.extract(clusterIndices);
    std::cout << "Clusters identified: " << clusterIndices.size() << std::endl;

    // color each cluster
    for(int i = 0; i < clusterIndices.size(); i++)
    {
        pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cluster(new pcl::PointCloud<pcl::PointXYZRGBA>);
        pcl::PointIndices::Ptr indices(new pcl::PointIndices(clusterIndices[i]));
        pcl::ExtractIndices<pcl::PointXYZRGBA> extract;
        extract.setInputCloud(cloud2Filtered);
        extract.setIndices(indices);
        extract.filter(*cluster);

        double length, width, height;
        getBoxDimensions(coefficients, cluster, length, width, height);

        std::cout << "Box " << i+1 << ": " << length << " " << width << " " << height << std::endl;
        
        // Alternate between green and red for each cluster
        int r, g, b;
        if (i % 2 == 0) {
            // Cluster is green
            r = 0;
            g = 255;
            b = 0;
        } else {
            // Cluster is red
            r = 255;
            g = 0;
            b = 0;
        }

        // Color the cluster points
        for(int j = 0; j < clusterIndices.at(i).indices.size(); j++)
        {
            cloud->points.at(clusterIndices.at(i).indices.at(j)).r = r;
            cloud->points.at(clusterIndices.at(i).indices.at(j)).g = g;
            cloud->points.at(clusterIndices.at(i).indices.at(j)).b = b;
        }  
    }

    // render the scene
    CV.addCloud(cloud);
    CV.addCoordinateFrame(cloud->sensor_origin_, cloud->sensor_orientation_);

    // register mouse and keyboard event callbacks
    CV.registerPointPickingCallback(pointPickingCallback, cloud);
    CV.registerKeyboardCallback(keyboardCallback);

    // enter visualization loop
    while(CV.isRunning())
    {
        CV.spin(100);
    }

    // exit program
    return 0;
}
